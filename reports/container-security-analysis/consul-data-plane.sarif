{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "CVE-2010-4756",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: glob implementation can cause excessive CPU and memory consumption due to crafted glob expressions"
              },
              "fullDescription": {
                "text": "The glob implementation in the GNU C Library (aka glibc or libc6) allows remote authenticated users to cause a denial of service (CPU and memory consumption) via crafted glob expressions that do not match any pathnames, as demonstrated by glob expressions in STAT commands to an FTP daemon, a different vulnerability than CVE-2010-2632."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2010-4756",
              "help": {
                "text": "Vulnerability CVE-2010-4756\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2010-4756](https://avd.aquasec.com/nvd/cve-2010-4756)\nThe glob implementation in the GNU C Library (aka glibc or libc6) allows remote authenticated users to cause a denial of service (CPU and memory consumption) via crafted glob expressions that do not match any pathnames, as demonstrated by glob expressions in STAT commands to an FTP daemon, a different vulnerability than CVE-2010-2632.",
                "markdown": "**Vulnerability CVE-2010-4756**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2010-4756](https://avd.aquasec.com/nvd/cve-2010-4756)|\n\nThe glob implementation in the GNU C Library (aka glibc or libc6) allows remote authenticated users to cause a denial of service (CPU and memory consumption) via crafted glob expressions that do not match any pathnames, as demonstrated by glob expressions in STAT commands to an FTP daemon, a different vulnerability than CVE-2010-2632."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2018-20796",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: uncontrolled recursion in function check_dst_limits_calc_pos_1 in posix/regexec.c"
              },
              "fullDescription": {
                "text": "In the GNU C Library (aka glibc or libc6) through 2.29, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion, as demonstrated by \u0026#39;(\\227|)(\\\\1\\\\1|t1|\\\\\\2537)+\u0026#39; in grep."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-20796",
              "help": {
                "text": "Vulnerability CVE-2018-20796\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2018-20796](https://avd.aquasec.com/nvd/cve-2018-20796)\nIn the GNU C Library (aka glibc or libc6) through 2.29, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion, as demonstrated by '(\\227|)(\\\\1\\\\1|t1|\\\\\\2537)+' in grep.",
                "markdown": "**Vulnerability CVE-2018-20796**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2018-20796](https://avd.aquasec.com/nvd/cve-2018-20796)|\n\nIn the GNU C Library (aka glibc or libc6) through 2.29, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion, as demonstrated by '(\\227|)(\\\\1\\\\1|t1|\\\\\\2537)+' in grep."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2019-1010022",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: stack guard protection bypass"
              },
              "fullDescription": {
                "text": "** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass stack guard protection. The component is: nptl. The attack vector is: Exploit stack buffer overflow vulnerability and use this bypass vulnerability to bypass stack guard. NOTE: Upstream comments indicate \u0026#34;this is being treated as a non-security bug and no real threat.\u0026#34;"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-1010022",
              "help": {
                "text": "Vulnerability CVE-2019-1010022\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2019-1010022](https://avd.aquasec.com/nvd/cve-2019-1010022)\n** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass stack guard protection. The component is: nptl. The attack vector is: Exploit stack buffer overflow vulnerability and use this bypass vulnerability to bypass stack guard. NOTE: Upstream comments indicate \"this is being treated as a non-security bug and no real threat.\"",
                "markdown": "**Vulnerability CVE-2019-1010022**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2019-1010022](https://avd.aquasec.com/nvd/cve-2019-1010022)|\n\n** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass stack guard protection. The component is: nptl. The attack vector is: Exploit stack buffer overflow vulnerability and use this bypass vulnerability to bypass stack guard. NOTE: Upstream comments indicate \"this is being treated as a non-security bug and no real threat.\""
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2019-1010023",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: running ldd on malicious ELF leads to code execution because of wrong size computation"
              },
              "fullDescription": {
                "text": "** DISPUTED ** GNU Libc current is affected by: Re-mapping current loaded library with malicious ELF file. The impact is: In worst case attacker may evaluate privileges. The component is: libld. The attack vector is: Attacker sends 2 ELF files to victim and asks to run ldd on it. ldd execute code. NOTE: Upstream comments indicate \u0026#34;this is being treated as a non-security bug and no real threat.\u0026#34;"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-1010023",
              "help": {
                "text": "Vulnerability CVE-2019-1010023\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2019-1010023](https://avd.aquasec.com/nvd/cve-2019-1010023)\n** DISPUTED ** GNU Libc current is affected by: Re-mapping current loaded library with malicious ELF file. The impact is: In worst case attacker may evaluate privileges. The component is: libld. The attack vector is: Attacker sends 2 ELF files to victim and asks to run ldd on it. ldd execute code. NOTE: Upstream comments indicate \"this is being treated as a non-security bug and no real threat.\"",
                "markdown": "**Vulnerability CVE-2019-1010023**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2019-1010023](https://avd.aquasec.com/nvd/cve-2019-1010023)|\n\n** DISPUTED ** GNU Libc current is affected by: Re-mapping current loaded library with malicious ELF file. The impact is: In worst case attacker may evaluate privileges. The component is: libld. The attack vector is: Attacker sends 2 ELF files to victim and asks to run ldd on it. ldd execute code. NOTE: Upstream comments indicate \"this is being treated as a non-security bug and no real threat.\""
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2019-1010024",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: ASLR bypass using cache of thread stack and heap"
              },
              "fullDescription": {
                "text": "** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass ASLR using cache of thread stack and heap. The component is: glibc. NOTE: Upstream comments indicate \u0026#34;this is being treated as a non-security bug and no real threat.\u0026#34;"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-1010024",
              "help": {
                "text": "Vulnerability CVE-2019-1010024\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2019-1010024](https://avd.aquasec.com/nvd/cve-2019-1010024)\n** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass ASLR using cache of thread stack and heap. The component is: glibc. NOTE: Upstream comments indicate \"this is being treated as a non-security bug and no real threat.\"",
                "markdown": "**Vulnerability CVE-2019-1010024**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2019-1010024](https://avd.aquasec.com/nvd/cve-2019-1010024)|\n\n** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass ASLR using cache of thread stack and heap. The component is: glibc. NOTE: Upstream comments indicate \"this is being treated as a non-security bug and no real threat.\""
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2019-1010025",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: information disclosure of heap addresses of pthread_created thread"
              },
              "fullDescription": {
                "text": "** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may guess the heap addresses of pthread_created thread. The component is: glibc. NOTE: the vendor\u0026#39;s position is \u0026#34;ASLR bypass itself is not a vulnerability.\u0026#34;"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-1010025",
              "help": {
                "text": "Vulnerability CVE-2019-1010025\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2019-1010025](https://avd.aquasec.com/nvd/cve-2019-1010025)\n** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may guess the heap addresses of pthread_created thread. The component is: glibc. NOTE: the vendor's position is \"ASLR bypass itself is not a vulnerability.\"",
                "markdown": "**Vulnerability CVE-2019-1010025**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2019-1010025](https://avd.aquasec.com/nvd/cve-2019-1010025)|\n\n** DISPUTED ** GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may guess the heap addresses of pthread_created thread. The component is: glibc. NOTE: the vendor's position is \"ASLR bypass itself is not a vulnerability.\""
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2019-9192",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "glibc: uncontrolled recursion in function check_dst_limits_calc_pos_1 in posix/regexec.c"
              },
              "fullDescription": {
                "text": "** DISPUTED ** In the GNU C Library (aka glibc or libc6) through 2.29, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion, as demonstrated by \u0026#39;(|)(\\\\1\\\\1)*\u0026#39; in grep, a different issue than CVE-2018-20796. NOTE: the software maintainer disputes that this is a vulnerability because the behavior occurs only with a crafted pattern."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-9192",
              "help": {
                "text": "Vulnerability CVE-2019-9192\nSeverity: LOW\nPackage: libc6\nFixed Version: \nLink: [CVE-2019-9192](https://avd.aquasec.com/nvd/cve-2019-9192)\n** DISPUTED ** In the GNU C Library (aka glibc or libc6) through 2.29, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion, as demonstrated by '(|)(\\\\1\\\\1)*' in grep, a different issue than CVE-2018-20796. NOTE: the software maintainer disputes that this is a vulnerability because the behavior occurs only with a crafted pattern.",
                "markdown": "**Vulnerability CVE-2019-9192**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|libc6||[CVE-2019-9192](https://avd.aquasec.com/nvd/cve-2019-9192)|\n\n** DISPUTED ** In the GNU C Library (aka glibc or libc6) through 2.29, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion, as demonstrated by '(|)(\\\\1\\\\1)*' in grep, a different issue than CVE-2018-20796. NOTE: the software maintainer disputes that this is a vulnerability because the behavior occurs only with a crafted pattern."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2023-0464",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Denial of service by excessive resource usage in verifying X509 policy constraints"
              },
              "fullDescription": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy\u0026#39; argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()\u0026#39; function."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0464",
              "help": {
                "text": "Vulnerability CVE-2023-0464\nSeverity: HIGH\nPackage: openssl\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0464](https://avd.aquasec.com/nvd/cve-2023-0464)\nA security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "**Vulnerability CVE-2023-0464**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|openssl|1.1.1n-0+deb11u5|[CVE-2023-0464](https://avd.aquasec.com/nvd/cve-2023-0464)|\n\nA security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-2650",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Possible DoS translating ASN.1 object identifiers"
              },
              "fullDescription": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with \u0026#39;n\u0026#39; being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL have a\n100KiB limit on the peer\u0026#39;s certificate chain.  Additionally, this only\nimpacts clients, or servers that have explicitly enabled client\nauthentication.\n\nIn OpenSSL 1.1.1 and 1.0.2, this only affects displaying diverse objects,\nsuch as X.509 certificates.  This is assumed to not happen in such a way\nthat it would cause a Denial of Service, so these versions are considered\nnot affected by this issue in such a way that it would be cause for concern,\nand the severity is therefore considered low."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-2650",
              "help": {
                "text": "Vulnerability CVE-2023-2650\nSeverity: HIGH\nPackage: openssl\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-2650](https://avd.aquasec.com/nvd/cve-2023-2650)\nIssue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL have a\n100KiB limit on the peer's certificate chain.  Additionally, this only\nimpacts clients, or servers that have explicitly enabled client\nauthentication.\n\nIn OpenSSL 1.1.1 and 1.0.2, this only affects displaying diverse objects,\nsuch as X.509 certificates.  This is assumed to not happen in such a way\nthat it would cause a Denial of Service, so these versions are considered\nnot affected by this issue in such a way that it would be cause for concern,\nand the severity is therefore considered low.",
                "markdown": "**Vulnerability CVE-2023-2650**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|openssl|1.1.1n-0+deb11u5|[CVE-2023-2650](https://avd.aquasec.com/nvd/cve-2023-2650)|\n\nIssue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL have a\n100KiB limit on the peer's certificate chain.  Additionally, this only\nimpacts clients, or servers that have explicitly enabled client\nauthentication.\n\nIn OpenSSL 1.1.1 and 1.0.2, this only affects displaying diverse objects,\nsuch as X.509 certificates.  This is assumed to not happen in such a way\nthat it would cause a Denial of Service, so these versions are considered\nnot affected by this issue in such a way that it would be cause for concern,\nand the severity is therefore considered low."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-0465",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Invalid certificate policies in leaf certificates are silently ignored"
              },
              "fullDescription": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy\u0026#39; argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()\u0026#39; function."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0465",
              "help": {
                "text": "Vulnerability CVE-2023-0465\nSeverity: MEDIUM\nPackage: openssl\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0465](https://avd.aquasec.com/nvd/cve-2023-0465)\nApplications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "**Vulnerability CVE-2023-0465**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|openssl|1.1.1n-0+deb11u5|[CVE-2023-0465](https://avd.aquasec.com/nvd/cve-2023-0465)|\n\nApplications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-0466",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Certificate policy check not enabled"
              },
              "fullDescription": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0466",
              "help": {
                "text": "Vulnerability CVE-2023-0466\nSeverity: MEDIUM\nPackage: openssl\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0466](https://avd.aquasec.com/nvd/cve-2023-0466)\nThe function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "**Vulnerability CVE-2023-0466**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|openssl|1.1.1n-0+deb11u5|[CVE-2023-0466](https://avd.aquasec.com/nvd/cve-2023-0466)|\n\nThe function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2007-6755",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Dual_EC_DRBG: weak pseudo random number generator"
              },
              "fullDescription": {
                "text": "The NIST SP 800-90A default statement of the Dual Elliptic Curve Deterministic Random Bit Generation (Dual_EC_DRBG) algorithm contains point Q constants with a possible relationship to certain \u0026#34;skeleton key\u0026#34; values, which might allow context-dependent attackers to defeat cryptographic protection mechanisms by leveraging knowledge of those values.  NOTE: this is a preliminary CVE for Dual_EC_DRBG; future research may provide additional details about point Q and associated attacks, and could potentially lead to a RECAST or REJECT of this CVE."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2007-6755",
              "help": {
                "text": "Vulnerability CVE-2007-6755\nSeverity: LOW\nPackage: openssl\nFixed Version: \nLink: [CVE-2007-6755](https://avd.aquasec.com/nvd/cve-2007-6755)\nThe NIST SP 800-90A default statement of the Dual Elliptic Curve Deterministic Random Bit Generation (Dual_EC_DRBG) algorithm contains point Q constants with a possible relationship to certain \"skeleton key\" values, which might allow context-dependent attackers to defeat cryptographic protection mechanisms by leveraging knowledge of those values.  NOTE: this is a preliminary CVE for Dual_EC_DRBG; future research may provide additional details about point Q and associated attacks, and could potentially lead to a RECAST or REJECT of this CVE.",
                "markdown": "**Vulnerability CVE-2007-6755**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|openssl||[CVE-2007-6755](https://avd.aquasec.com/nvd/cve-2007-6755)|\n\nThe NIST SP 800-90A default statement of the Dual Elliptic Curve Deterministic Random Bit Generation (Dual_EC_DRBG) algorithm contains point Q constants with a possible relationship to certain \"skeleton key\" values, which might allow context-dependent attackers to defeat cryptographic protection mechanisms by leveraging knowledge of those values.  NOTE: this is a preliminary CVE for Dual_EC_DRBG; future research may provide additional details about point Q and associated attacks, and could potentially lead to a RECAST or REJECT of this CVE."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2010-0928",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: RSA authentication weakness"
              },
              "fullDescription": {
                "text": "OpenSSL 0.9.8i on the Gaisler Research LEON3 SoC on the Xilinx Virtex-II Pro FPGA uses a Fixed Width Exponentiation (FWE) algorithm for certain signature calculations, and does not verify the signature before providing it to a caller, which makes it easier for physically proximate attackers to determine the private key via a modified supply voltage for the microprocessor, related to a \u0026#34;fault-based attack.\u0026#34;"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2010-0928",
              "help": {
                "text": "Vulnerability CVE-2010-0928\nSeverity: LOW\nPackage: openssl\nFixed Version: \nLink: [CVE-2010-0928](https://avd.aquasec.com/nvd/cve-2010-0928)\nOpenSSL 0.9.8i on the Gaisler Research LEON3 SoC on the Xilinx Virtex-II Pro FPGA uses a Fixed Width Exponentiation (FWE) algorithm for certain signature calculations, and does not verify the signature before providing it to a caller, which makes it easier for physically proximate attackers to determine the private key via a modified supply voltage for the microprocessor, related to a \"fault-based attack.\"",
                "markdown": "**Vulnerability CVE-2010-0928**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|openssl||[CVE-2010-0928](https://avd.aquasec.com/nvd/cve-2010-0928)|\n\nOpenSSL 0.9.8i on the Gaisler Research LEON3 SoC on the Xilinx Virtex-II Pro FPGA uses a Fixed Width Exponentiation (FWE) algorithm for certain signature calculations, and does not verify the signature before providing it to a caller, which makes it easier for physically proximate attackers to determine the private key via a modified supply voltage for the microprocessor, related to a \"fault-based attack.\""
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2020-8911",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "aws/aws-sdk-go: CBC padding oracle issue in AWS S3 Crypto SDK for golang"
              },
              "fullDescription": {
                "text": "A padding oracle vulnerability exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. The SDK allows users to encrypt files with AES-CBC without computing a Message Authentication Code (MAC), which then allows an attacker who has write access to the target\u0026#39;s S3 bucket and can observe whether or not an endpoint with access to the key can decrypt a file, they can reconstruct the plaintext with (on average) 128*length (plaintext) queries to the endpoint, by exploiting CBC\u0026#39;s ability to manipulate the bytes of the next block and PKCS5 padding errors. It is recommended to update your SDK to V2 or later, and re-encrypt your files."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-8911",
              "help": {
                "text": "Vulnerability CVE-2020-8911\nSeverity: MEDIUM\nPackage: github.com/aws/aws-sdk-go\nFixed Version: \nLink: [CVE-2020-8911](https://avd.aquasec.com/nvd/cve-2020-8911)\nA padding oracle vulnerability exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. The SDK allows users to encrypt files with AES-CBC without computing a Message Authentication Code (MAC), which then allows an attacker who has write access to the target's S3 bucket and can observe whether or not an endpoint with access to the key can decrypt a file, they can reconstruct the plaintext with (on average) 128*length (plaintext) queries to the endpoint, by exploiting CBC's ability to manipulate the bytes of the next block and PKCS5 padding errors. It is recommended to update your SDK to V2 or later, and re-encrypt your files.",
                "markdown": "**Vulnerability CVE-2020-8911**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|github.com/aws/aws-sdk-go||[CVE-2020-8911](https://avd.aquasec.com/nvd/cve-2020-8911)|\n\nA padding oracle vulnerability exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. The SDK allows users to encrypt files with AES-CBC without computing a Message Authentication Code (MAC), which then allows an attacker who has write access to the target's S3 bucket and can observe whether or not an endpoint with access to the key can decrypt a file, they can reconstruct the plaintext with (on average) 128*length (plaintext) queries to the endpoint, by exploiting CBC's ability to manipulate the bytes of the next block and PKCS5 padding errors. It is recommended to update your SDK to V2 or later, and re-encrypt your files."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-2582",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "The AWS S3 Crypto SDK sends an unencrypted hash of the plaintext along ..."
              },
              "fullDescription": {
                "text": "The AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker. AWS now blocks this metadata field, but older SDK versions still send it."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-2582",
              "help": {
                "text": "Vulnerability CVE-2022-2582\nSeverity: MEDIUM\nPackage: github.com/aws/aws-sdk-go\nFixed Version: 1.34.0\nLink: [CVE-2022-2582](https://avd.aquasec.com/nvd/cve-2022-2582)\nThe AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker. AWS now blocks this metadata field, but older SDK versions still send it.",
                "markdown": "**Vulnerability CVE-2022-2582**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|github.com/aws/aws-sdk-go|1.34.0|[CVE-2022-2582](https://avd.aquasec.com/nvd/cve-2022-2582)|\n\nThe AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker. AWS now blocks this metadata field, but older SDK versions still send it."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "4.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "GHSA-76wf-9vgp-pj7w",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "Unencrypted md5 plaintext hash in metadata in AWS S3 Crypto SDK for golang"
              },
              "fullDescription": {
                "text": "### Summary\n\nThe golang AWS S3 Crypto SDK was impacted by an issue that can result in loss of confidentiality. An attacker with read access to an encrypted S3 bucket was able to recover the plaintext without accessing the encryption key.\n\n### Risk/Severity\n\nThe vulnerability poses insider risks/privilege escalation risks, circumventing KMS controls for stored data.\n\n### Impact\n\nThe issue has been fully mitigated by AWS as of Aug. 5th by disallowing the header in question.\n\nThe S3 crypto library tries to store an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext in an offline attack, if the hash is readable to the attacker. In order to be impacted by this issue, the attacker has to be able to guess the plaintext as a whole. The attack is theoretically valid if the plaintext entropy is below the key size, i.e. if it is easier to brute force the plaintext instead of the key itself, but practically feasible only for short plaintexts or plaintexts otherwise accessible to the attacker in order to create a rainbow table.\n\nThe issue has been fixed server-side by AWS as of Aug 5th, by blocking the related metadata field. No S3 objects are affected anymore.\n\n### Mitigation\n\nThe header in question is no longer served by AWS, making this attack fully mitigated as of Aug. 5th.\n\n### Proof of concept\n\nA [Proof of concept](https://github.com/sophieschmieg/exploits/tree/master/aws_s3_crypto_poc) is available in a separate github repository, this particular issue can be found at [here](https://github.com/sophieschmieg/exploits/blob/master/aws_s3_crypto_poc/exploit/hash_exploit.go):\n\n```golang\nfunc HashExploit(bucket string, key string, input *OfflineAttackInput) (string, error) {\n\t_, header, err := input.S3Mock.GetObjectDirect(bucket, key)\n\tlength, err := strconv.Atoi(header.Get(\u0026#34;X-Amz-Meta-X-Amz-Unencrypted-Content-Length\u0026#34;))\n\tplaintextMd5 := header.Get(\u0026#34;X-Amz-Meta-X-Amz-Unencrypted-Content-Md5\u0026#34;)\n\tblocks := length / 16\n\tpossiblePlaintextNum := 1\n\tsegNum := len(input.PossiblePlaintextSegments)\n\tfor i := 0; i \u0026lt; blocks; i++ {\n\t\tpossiblePlaintextNum *= segNum\n\t}\n\tfor i := 0; i \u0026lt; possiblePlaintextNum; i++ {\n\t\tw := i\n\t\tguess := \u0026#34;\u0026#34;\n\t\tfor j := 0; j \u0026lt; blocks; j++ {\n\t\t\tguess += input.PossiblePlaintextSegments[w%segNum]\n\t\t\tw /= segNum\n\t\t}\n\t\tguessMd5 := md5.Sum([]byte(guess))\n\t\tif plaintextMd5 == base64.StdEncoding.EncodeToString(guessMd5[:]) {\n\t\t\treturn guess, nil\n\t\t}\n\t}\n\treturn \u0026#34;\u0026#34;, fmt.Errorf(\u0026#34;No plaintext found!\u0026#34;)\n}\n```\n\nThe PoC will only work on old versions of the library, as the hash has been removed from being calculated as well."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://github.com/advisories/GHSA-76wf-9vgp-pj7w",
              "help": {
                "text": "Vulnerability GHSA-76wf-9vgp-pj7w\nSeverity: MEDIUM\nPackage: github.com/aws/aws-sdk-go\nFixed Version: 1.34.0\nLink: [GHSA-76wf-9vgp-pj7w](https://github.com/advisories/GHSA-76wf-9vgp-pj7w)\n### Summary\n\nThe golang AWS S3 Crypto SDK was impacted by an issue that can result in loss of confidentiality. An attacker with read access to an encrypted S3 bucket was able to recover the plaintext without accessing the encryption key.\n\n### Risk/Severity\n\nThe vulnerability poses insider risks/privilege escalation risks, circumventing KMS controls for stored data.\n\n### Impact\n\nThe issue has been fully mitigated by AWS as of Aug. 5th by disallowing the header in question.\n\nThe S3 crypto library tries to store an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext in an offline attack, if the hash is readable to the attacker. In order to be impacted by this issue, the attacker has to be able to guess the plaintext as a whole. The attack is theoretically valid if the plaintext entropy is below the key size, i.e. if it is easier to brute force the plaintext instead of the key itself, but practically feasible only for short plaintexts or plaintexts otherwise accessible to the attacker in order to create a rainbow table.\n\nThe issue has been fixed server-side by AWS as of Aug 5th, by blocking the related metadata field. No S3 objects are affected anymore.\n\n### Mitigation\n\nThe header in question is no longer served by AWS, making this attack fully mitigated as of Aug. 5th.\n\n### Proof of concept\n\nA [Proof of concept](https://github.com/sophieschmieg/exploits/tree/master/aws_s3_crypto_poc) is available in a separate github repository, this particular issue can be found at [here](https://github.com/sophieschmieg/exploits/blob/master/aws_s3_crypto_poc/exploit/hash_exploit.go):\n\n```golang\nfunc HashExploit(bucket string, key string, input *OfflineAttackInput) (string, error) {\n\t_, header, err := input.S3Mock.GetObjectDirect(bucket, key)\n\tlength, err := strconv.Atoi(header.Get(\"X-Amz-Meta-X-Amz-Unencrypted-Content-Length\"))\n\tplaintextMd5 := header.Get(\"X-Amz-Meta-X-Amz-Unencrypted-Content-Md5\")\n\tblocks := length / 16\n\tpossiblePlaintextNum := 1\n\tsegNum := len(input.PossiblePlaintextSegments)\n\tfor i := 0; i \u003c blocks; i++ {\n\t\tpossiblePlaintextNum *= segNum\n\t}\n\tfor i := 0; i \u003c possiblePlaintextNum; i++ {\n\t\tw := i\n\t\tguess := \"\"\n\t\tfor j := 0; j \u003c blocks; j++ {\n\t\t\tguess += input.PossiblePlaintextSegments[w%segNum]\n\t\t\tw /= segNum\n\t\t}\n\t\tguessMd5 := md5.Sum([]byte(guess))\n\t\tif plaintextMd5 == base64.StdEncoding.EncodeToString(guessMd5[:]) {\n\t\t\treturn guess, nil\n\t\t}\n\t}\n\treturn \"\", fmt.Errorf(\"No plaintext found!\")\n}\n```\n\nThe PoC will only work on old versions of the library, as the hash has been removed from being calculated as well.",
                "markdown": "**Vulnerability GHSA-76wf-9vgp-pj7w**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|github.com/aws/aws-sdk-go|1.34.0|[GHSA-76wf-9vgp-pj7w](https://github.com/advisories/GHSA-76wf-9vgp-pj7w)|\n\n### Summary\n\nThe golang AWS S3 Crypto SDK was impacted by an issue that can result in loss of confidentiality. An attacker with read access to an encrypted S3 bucket was able to recover the plaintext without accessing the encryption key.\n\n### Risk/Severity\n\nThe vulnerability poses insider risks/privilege escalation risks, circumventing KMS controls for stored data.\n\n### Impact\n\nThe issue has been fully mitigated by AWS as of Aug. 5th by disallowing the header in question.\n\nThe S3 crypto library tries to store an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext in an offline attack, if the hash is readable to the attacker. In order to be impacted by this issue, the attacker has to be able to guess the plaintext as a whole. The attack is theoretically valid if the plaintext entropy is below the key size, i.e. if it is easier to brute force the plaintext instead of the key itself, but practically feasible only for short plaintexts or plaintexts otherwise accessible to the attacker in order to create a rainbow table.\n\nThe issue has been fixed server-side by AWS as of Aug 5th, by blocking the related metadata field. No S3 objects are affected anymore.\n\n### Mitigation\n\nThe header in question is no longer served by AWS, making this attack fully mitigated as of Aug. 5th.\n\n### Proof of concept\n\nA [Proof of concept](https://github.com/sophieschmieg/exploits/tree/master/aws_s3_crypto_poc) is available in a separate github repository, this particular issue can be found at [here](https://github.com/sophieschmieg/exploits/blob/master/aws_s3_crypto_poc/exploit/hash_exploit.go):\n\n```golang\nfunc HashExploit(bucket string, key string, input *OfflineAttackInput) (string, error) {\n\t_, header, err := input.S3Mock.GetObjectDirect(bucket, key)\n\tlength, err := strconv.Atoi(header.Get(\"X-Amz-Meta-X-Amz-Unencrypted-Content-Length\"))\n\tplaintextMd5 := header.Get(\"X-Amz-Meta-X-Amz-Unencrypted-Content-Md5\")\n\tblocks := length / 16\n\tpossiblePlaintextNum := 1\n\tsegNum := len(input.PossiblePlaintextSegments)\n\tfor i := 0; i \u003c blocks; i++ {\n\t\tpossiblePlaintextNum *= segNum\n\t}\n\tfor i := 0; i \u003c possiblePlaintextNum; i++ {\n\t\tw := i\n\t\tguess := \"\"\n\t\tfor j := 0; j \u003c blocks; j++ {\n\t\t\tguess += input.PossiblePlaintextSegments[w%segNum]\n\t\t\tw /= segNum\n\t\t}\n\t\tguessMd5 := md5.Sum([]byte(guess))\n\t\tif plaintextMd5 == base64.StdEncoding.EncodeToString(guessMd5[:]) {\n\t\t\treturn guess, nil\n\t\t}\n\t}\n\treturn \"\", fmt.Errorf(\"No plaintext found!\")\n}\n```\n\nThe PoC will only work on old versions of the library, as the hash has been removed from being calculated as well."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8912",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "aws-sdk-go: In-band key negotiation issue in AWS S3 Crypto SDK for golang"
              },
              "fullDescription": {
                "text": "A vulnerability in the in-band key negotiation exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. An attacker with write access to the targeted bucket can change the encryption algorithm of an object in the bucket, which can then allow them to change AES-GCM to AES-CTR. Using this in combination with a decryption oracle can reveal the authentication key used by AES-GCM as decrypting the GMAC tag leaves the authentication key recoverable as an algebraic equation. It is recommended to update your SDK to V2 or later, and re-encrypt your files."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-8912",
              "help": {
                "text": "Vulnerability CVE-2020-8912\nSeverity: LOW\nPackage: github.com/aws/aws-sdk-go\nFixed Version: \nLink: [CVE-2020-8912](https://avd.aquasec.com/nvd/cve-2020-8912)\nA vulnerability in the in-band key negotiation exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. An attacker with write access to the targeted bucket can change the encryption algorithm of an object in the bucket, which can then allow them to change AES-GCM to AES-CTR. Using this in combination with a decryption oracle can reveal the authentication key used by AES-GCM as decrypting the GMAC tag leaves the authentication key recoverable as an algebraic equation. It is recommended to update your SDK to V2 or later, and re-encrypt your files.",
                "markdown": "**Vulnerability CVE-2020-8912**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|github.com/aws/aws-sdk-go||[CVE-2020-8912](https://avd.aquasec.com/nvd/cve-2020-8912)|\n\nA vulnerability in the in-band key negotiation exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. An attacker with write access to the targeted bucket can change the encryption algorithm of an object in the bucket, which can then allow them to change AES-GCM to AES-CTR. Using this in combination with a decryption oracle can reveal the authentication key used by AES-GCM as decrypting the GMAC tag leaves the authentication key recoverable as an algebraic equation. It is recommended to update your SDK to V2 or later, and re-encrypt your files."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2019-19794",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang-github-miekg-dns: predictable TXID can lead to response forgeries"
              },
              "fullDescription": {
                "text": "The miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-19794",
              "help": {
                "text": "Vulnerability CVE-2019-19794\nSeverity: MEDIUM\nPackage: github.com/miekg/dns\nFixed Version: 1.1.25-0.20191211073109-8ebf2e419df7\nLink: [CVE-2019-19794](https://avd.aquasec.com/nvd/cve-2019-19794)\nThe miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.",
                "markdown": "**Vulnerability CVE-2019-19794**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|github.com/miekg/dns|1.1.25-0.20191211073109-8ebf2e419df7|[CVE-2019-19794](https://avd.aquasec.com/nvd/cve-2019-19794)|\n\nThe miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-29652",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang: crypto/ssh: crafted authentication request can lead to nil pointer dereference"
              },
              "fullDescription": {
                "text": "A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-29652",
              "help": {
                "text": "Vulnerability CVE-2020-29652\nSeverity: HIGH\nPackage: golang.org/x/crypto\nFixed Version: 0.0.0-20201216223049-8b5274cf687f\nLink: [CVE-2020-29652](https://avd.aquasec.com/nvd/cve-2020-29652)\nA nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers.",
                "markdown": "**Vulnerability CVE-2020-29652**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/crypto|0.0.0-20201216223049-8b5274cf687f|[CVE-2020-29652](https://avd.aquasec.com/nvd/cve-2020-29652)|\n\nA nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-43565",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang.org/x/crypto: empty plaintext packet causes panic"
              },
              "fullDescription": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-43565",
              "help": {
                "text": "Vulnerability CVE-2021-43565\nSeverity: HIGH\nPackage: golang.org/x/crypto\nFixed Version: 0.0.0-20211202192323-5770296d904e\nLink: [CVE-2021-43565](https://avd.aquasec.com/nvd/cve-2021-43565)\nThe x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "**Vulnerability CVE-2021-43565**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/crypto|0.0.0-20211202192323-5770296d904e|[CVE-2021-43565](https://avd.aquasec.com/nvd/cve-2021-43565)|\n\nThe x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-27191",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "crash in a golang.org/x/crypto/ssh server"
              },
              "fullDescription": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-27191",
              "help": {
                "text": "Vulnerability CVE-2022-27191\nSeverity: HIGH\nPackage: golang.org/x/crypto\nFixed Version: 0.0.0-20220314234659-1baeb1ce4c0b\nLink: [CVE-2022-27191](https://avd.aquasec.com/nvd/cve-2022-27191)\nThe golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "**Vulnerability CVE-2022-27191**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/crypto|0.0.0-20220314234659-1baeb1ce4c0b|[CVE-2022-27191](https://avd.aquasec.com/nvd/cve-2022-27191)|\n\nThe golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-33194",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang: x/net/html: infinite loop in ParseFragment"
              },
              "fullDescription": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-33194",
              "help": {
                "text": "Vulnerability CVE-2021-33194\nSeverity: HIGH\nPackage: golang.org/x/net\nFixed Version: 0.0.0-20210520170846-37e1c6afe023\nLink: [CVE-2021-33194](https://avd.aquasec.com/nvd/cve-2021-33194)\ngolang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "**Vulnerability CVE-2021-33194**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/net|0.0.0-20210520170846-37e1c6afe023|[CVE-2021-33194](https://avd.aquasec.com/nvd/cve-2021-33194)|\n\ngolang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-44716",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang: net/http: limit growth of header canonicalization cache"
              },
              "fullDescription": {
                "text": "net/http in Go before 1.16.12 and 1.17.x before 1.17.5 allows uncontrolled memory consumption in the header canonicalization cache via HTTP/2 requests."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-44716",
              "help": {
                "text": "Vulnerability CVE-2021-44716\nSeverity: HIGH\nPackage: golang.org/x/net\nFixed Version: 0.0.0-20211209124913-491a49abca63\nLink: [CVE-2021-44716](https://avd.aquasec.com/nvd/cve-2021-44716)\nnet/http in Go before 1.16.12 and 1.17.x before 1.17.5 allows uncontrolled memory consumption in the header canonicalization cache via HTTP/2 requests.",
                "markdown": "**Vulnerability CVE-2021-44716**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/net|0.0.0-20211209124913-491a49abca63|[CVE-2021-44716](https://avd.aquasec.com/nvd/cve-2021-44716)|\n\nnet/http in Go before 1.16.12 and 1.17.x before 1.17.5 allows uncontrolled memory consumption in the header canonicalization cache via HTTP/2 requests."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-27664",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "handle server errors after sending GOAWAY"
              },
              "fullDescription": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-27664",
              "help": {
                "text": "Vulnerability CVE-2022-27664\nSeverity: HIGH\nPackage: golang.org/x/net\nFixed Version: 0.0.0-20220906165146-f3363e06e74c\nLink: [CVE-2022-27664](https://avd.aquasec.com/nvd/cve-2022-27664)\nIn net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "**Vulnerability CVE-2022-27664**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/net|0.0.0-20220906165146-f3363e06e74c|[CVE-2022-27664](https://avd.aquasec.com/nvd/cve-2022-27664)|\n\nIn net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41723",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "avoid quadratic complexity in HPACK decoding"
              },
              "fullDescription": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-41723",
              "help": {
                "text": "Vulnerability CVE-2022-41723\nSeverity: HIGH\nPackage: golang.org/x/net\nFixed Version: 0.7.0\nLink: [CVE-2022-41723](https://avd.aquasec.com/nvd/cve-2022-41723)\nA maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "**Vulnerability CVE-2022-41723**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/net|0.7.0|[CVE-2022-41723](https://avd.aquasec.com/nvd/cve-2022-41723)|\n\nA maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-31525",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang: net/http: panic in ReadRequest and ReadResponse when reading a very large header"
              },
              "fullDescription": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-31525",
              "help": {
                "text": "Vulnerability CVE-2021-31525\nSeverity: MEDIUM\nPackage: golang.org/x/net\nFixed Version: 0.0.0-20210428140749-89ef3d95e781\nLink: [CVE-2021-31525](https://avd.aquasec.com/nvd/cve-2021-31525)\nnet/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "**Vulnerability CVE-2021-31525**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|golang.org/x/net|0.0.0-20210428140749-89ef3d95e781|[CVE-2021-31525](https://avd.aquasec.com/nvd/cve-2021-31525)|\n\nnet/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-41717",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "excessive memory growth in a Go server accepting HTTP/2 requests"
              },
              "fullDescription": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-41717",
              "help": {
                "text": "Vulnerability CVE-2022-41717\nSeverity: MEDIUM\nPackage: golang.org/x/net\nFixed Version: 0.4.0\nLink: [CVE-2022-41717](https://avd.aquasec.com/nvd/cve-2022-41717)\nAn attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "**Vulnerability CVE-2022-41717**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|golang.org/x/net|0.4.0|[CVE-2022-41717](https://avd.aquasec.com/nvd/cve-2022-41717)|\n\nAn attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-29526",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "faccessat checks wrong group"
              },
              "fullDescription": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-29526",
              "help": {
                "text": "Vulnerability CVE-2022-29526\nSeverity: MEDIUM\nPackage: golang.org/x/sys\nFixed Version: 0.0.0-20220412211240-33da011f77ad\nLink: [CVE-2022-29526](https://avd.aquasec.com/nvd/cve-2022-29526)\nGo before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "**Vulnerability CVE-2022-29526**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|golang.org/x/sys|0.0.0-20220412211240-33da011f77ad|[CVE-2022-29526](https://avd.aquasec.com/nvd/cve-2022-29526)|\n\nGo before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-38561",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "out-of-bounds read in golang.org/x/text/language leads to DoS"
              },
              "fullDescription": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-38561",
              "help": {
                "text": "Vulnerability CVE-2021-38561\nSeverity: HIGH\nPackage: golang.org/x/text\nFixed Version: 0.3.7\nLink: [CVE-2021-38561](https://avd.aquasec.com/nvd/cve-2021-38561)\ngolang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
                "markdown": "**Vulnerability CVE-2021-38561**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/text|0.3.7|[CVE-2021-38561](https://avd.aquasec.com/nvd/cve-2021-38561)|\n\ngolang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-32149",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "ParseAcceptLanguage takes a long time to parse complex tags"
              },
              "fullDescription": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-32149",
              "help": {
                "text": "Vulnerability CVE-2022-32149\nSeverity: HIGH\nPackage: golang.org/x/text\nFixed Version: 0.3.8\nLink: [CVE-2022-32149](https://avd.aquasec.com/nvd/cve-2022-32149)\nAn attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "**Vulnerability CVE-2022-32149**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|golang.org/x/text|0.3.8|[CVE-2022-32149](https://avd.aquasec.com/nvd/cve-2022-32149)|\n\nAn attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-14040",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "golang.org/x/text: possibility to trigger an infinite loop in encoding/unicode could lead to crash"
              },
              "fullDescription": {
                "text": "The x/text package before 0.3.3 for Go has a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-14040",
              "help": {
                "text": "Vulnerability CVE-2020-14040\nSeverity: MEDIUM\nPackage: golang.org/x/text\nFixed Version: 0.3.3\nLink: [CVE-2020-14040](https://avd.aquasec.com/nvd/cve-2020-14040)\nThe x/text package before 0.3.3 for Go has a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String.",
                "markdown": "**Vulnerability CVE-2020-14040**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|golang.org/x/text|0.3.3|[CVE-2020-14040](https://avd.aquasec.com/nvd/cve-2020-14040)|\n\nThe x/text package before 0.3.3 for Go has a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            }
          ],
          "version": "0.42.0"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2010-4756",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2010-4756\nSeverity: LOW\nFixed Version: \nLink: [CVE-2010-4756](https://avd.aquasec.com/nvd/cve-2010-4756)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20796",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2018-20796\nSeverity: LOW\nFixed Version: \nLink: [CVE-2018-20796](https://avd.aquasec.com/nvd/cve-2018-20796)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1010022",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2019-1010022\nSeverity: LOW\nFixed Version: \nLink: [CVE-2019-1010022](https://avd.aquasec.com/nvd/cve-2019-1010022)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1010023",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2019-1010023\nSeverity: LOW\nFixed Version: \nLink: [CVE-2019-1010023](https://avd.aquasec.com/nvd/cve-2019-1010023)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1010024",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2019-1010024\nSeverity: LOW\nFixed Version: \nLink: [CVE-2019-1010024](https://avd.aquasec.com/nvd/cve-2019-1010024)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1010025",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2019-1010025\nSeverity: LOW\nFixed Version: \nLink: [CVE-2019-1010025](https://avd.aquasec.com/nvd/cve-2019-1010025)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-9192",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Package: libc6\nInstalled Version: 2.31-13+deb11u5\nVulnerability CVE-2019-9192\nSeverity: LOW\nFixed Version: \nLink: [CVE-2019-9192](https://avd.aquasec.com/nvd/cve-2019-9192)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libc6@2.31-13+deb11u5"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-0464\nSeverity: HIGH\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0464](https://avd.aquasec.com/nvd/cve-2023-0464)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libssl1.1@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-2650\nSeverity: HIGH\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-2650](https://avd.aquasec.com/nvd/cve-2023-2650)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libssl1.1@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-0465\nSeverity: MEDIUM\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0465](https://avd.aquasec.com/nvd/cve-2023-0465)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libssl1.1@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-0466\nSeverity: MEDIUM\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0466](https://avd.aquasec.com/nvd/cve-2023-0466)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libssl1.1@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-6755",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2007-6755\nSeverity: LOW\nFixed Version: \nLink: [CVE-2007-6755](https://avd.aquasec.com/nvd/cve-2007-6755)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libssl1.1@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2010-0928",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2010-0928\nSeverity: LOW\nFixed Version: \nLink: [CVE-2010-0928](https://avd.aquasec.com/nvd/cve-2010-0928)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: libssl1.1@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-0464\nSeverity: HIGH\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0464](https://avd.aquasec.com/nvd/cve-2023-0464)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: openssl@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-2650\nSeverity: HIGH\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-2650](https://avd.aquasec.com/nvd/cve-2023-2650)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: openssl@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-0465\nSeverity: MEDIUM\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0465](https://avd.aquasec.com/nvd/cve-2023-0465)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: openssl@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2023-0466\nSeverity: MEDIUM\nFixed Version: 1.1.1n-0+deb11u5\nLink: [CVE-2023-0466](https://avd.aquasec.com/nvd/cve-2023-0466)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: openssl@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-6755",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2007-6755\nSeverity: LOW\nFixed Version: \nLink: [CVE-2007-6755](https://avd.aquasec.com/nvd/cve-2007-6755)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: openssl@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2010-0928",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.1n-0+deb11u4\nVulnerability CVE-2010-0928\nSeverity: LOW\nFixed Version: \nLink: [CVE-2010-0928](https://avd.aquasec.com/nvd/cve-2010-0928)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hashicorp/consul-dataplane",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "hashicorp/consul-dataplane: openssl@1.1.1n-0+deb11u4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8911",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Package: github.com/aws/aws-sdk-go\nInstalled Version: v1.25.41\nVulnerability CVE-2020-8911\nSeverity: MEDIUM\nFixed Version: \nLink: [CVE-2020-8911](https://avd.aquasec.com/nvd/cve-2020-8911)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: github.com/aws/aws-sdk-go@v1.25.41"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2582",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Package: github.com/aws/aws-sdk-go\nInstalled Version: v1.25.41\nVulnerability CVE-2022-2582\nSeverity: MEDIUM\nFixed Version: 1.34.0\nLink: [CVE-2022-2582](https://avd.aquasec.com/nvd/cve-2022-2582)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: github.com/aws/aws-sdk-go@v1.25.41"
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-76wf-9vgp-pj7w",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Package: github.com/aws/aws-sdk-go\nInstalled Version: v1.25.41\nVulnerability GHSA-76wf-9vgp-pj7w\nSeverity: MEDIUM\nFixed Version: 1.34.0\nLink: [GHSA-76wf-9vgp-pj7w](https://github.com/advisories/GHSA-76wf-9vgp-pj7w)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: github.com/aws/aws-sdk-go@v1.25.41"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8912",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Package: github.com/aws/aws-sdk-go\nInstalled Version: v1.25.41\nVulnerability CVE-2020-8912\nSeverity: LOW\nFixed Version: \nLink: [CVE-2020-8912](https://avd.aquasec.com/nvd/cve-2020-8912)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: github.com/aws/aws-sdk-go@v1.25.41"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-19794",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "Package: github.com/miekg/dns\nInstalled Version: v1.0.14\nVulnerability CVE-2019-19794\nSeverity: MEDIUM\nFixed Version: 1.1.25-0.20191211073109-8ebf2e419df7\nLink: [CVE-2019-19794](https://avd.aquasec.com/nvd/cve-2019-19794)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: github.com/miekg/dns@v1.0.14"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29652",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/crypto\nInstalled Version: v0.0.0-20201002170205-7f63de1d35b0\nVulnerability CVE-2020-29652\nSeverity: HIGH\nFixed Version: 0.0.0-20201216223049-8b5274cf687f\nLink: [CVE-2020-29652](https://avd.aquasec.com/nvd/cve-2020-29652)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/crypto@v0.0.0-20201002170205-7f63de1d35b0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/crypto\nInstalled Version: v0.0.0-20201002170205-7f63de1d35b0\nVulnerability CVE-2021-43565\nSeverity: HIGH\nFixed Version: 0.0.0-20211202192323-5770296d904e\nLink: [CVE-2021-43565](https://avd.aquasec.com/nvd/cve-2021-43565)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/crypto@v0.0.0-20201002170205-7f63de1d35b0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/crypto\nInstalled Version: v0.0.0-20201002170205-7f63de1d35b0\nVulnerability CVE-2022-27191\nSeverity: HIGH\nFixed Version: 0.0.0-20220314234659-1baeb1ce4c0b\nLink: [CVE-2022-27191](https://avd.aquasec.com/nvd/cve-2022-27191)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/crypto@v0.0.0-20201002170205-7f63de1d35b0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/net\nInstalled Version: v0.0.0-20191004110552-13f9640d40b9\nVulnerability CVE-2021-33194\nSeverity: HIGH\nFixed Version: 0.0.0-20210520170846-37e1c6afe023\nLink: [CVE-2021-33194](https://avd.aquasec.com/nvd/cve-2021-33194)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/net@v0.0.0-20191004110552-13f9640d40b9"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44716",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/net\nInstalled Version: v0.0.0-20191004110552-13f9640d40b9\nVulnerability CVE-2021-44716\nSeverity: HIGH\nFixed Version: 0.0.0-20211209124913-491a49abca63\nLink: [CVE-2021-44716](https://avd.aquasec.com/nvd/cve-2021-44716)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/net@v0.0.0-20191004110552-13f9640d40b9"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/net\nInstalled Version: v0.0.0-20191004110552-13f9640d40b9\nVulnerability CVE-2022-27664\nSeverity: HIGH\nFixed Version: 0.0.0-20220906165146-f3363e06e74c\nLink: [CVE-2022-27664](https://avd.aquasec.com/nvd/cve-2022-27664)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/net@v0.0.0-20191004110552-13f9640d40b9"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/net\nInstalled Version: v0.0.0-20191004110552-13f9640d40b9\nVulnerability CVE-2022-41723\nSeverity: HIGH\nFixed Version: 0.7.0\nLink: [CVE-2022-41723](https://avd.aquasec.com/nvd/cve-2022-41723)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/net@v0.0.0-20191004110552-13f9640d40b9"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "Package: golang.org/x/net\nInstalled Version: v0.0.0-20191004110552-13f9640d40b9\nVulnerability CVE-2021-31525\nSeverity: MEDIUM\nFixed Version: 0.0.0-20210428140749-89ef3d95e781\nLink: [CVE-2021-31525](https://avd.aquasec.com/nvd/cve-2021-31525)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/net@v0.0.0-20191004110552-13f9640d40b9"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "Package: golang.org/x/net\nInstalled Version: v0.0.0-20191004110552-13f9640d40b9\nVulnerability CVE-2022-41717\nSeverity: MEDIUM\nFixed Version: 0.4.0\nLink: [CVE-2022-41717](https://avd.aquasec.com/nvd/cve-2022-41717)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/net@v0.0.0-20191004110552-13f9640d40b9"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526",
          "ruleIndex": 27,
          "level": "warning",
          "message": {
            "text": "Package: golang.org/x/sys\nInstalled Version: v0.0.0-20191022100944-742c48ecaeb7\nVulnerability CVE-2022-29526\nSeverity: MEDIUM\nFixed Version: 0.0.0-20220412211240-33da011f77ad\nLink: [CVE-2022-29526](https://avd.aquasec.com/nvd/cve-2022-29526)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/sys@v0.0.0-20191022100944-742c48ecaeb7"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/text\nInstalled Version: v0.3.2\nVulnerability CVE-2021-38561\nSeverity: HIGH\nFixed Version: 0.3.7\nLink: [CVE-2021-38561](https://avd.aquasec.com/nvd/cve-2021-38561)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/text@v0.3.2"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "Package: golang.org/x/text\nInstalled Version: v0.3.2\nVulnerability CVE-2022-32149\nSeverity: HIGH\nFixed Version: 0.3.8\nLink: [CVE-2022-32149](https://avd.aquasec.com/nvd/cve-2022-32149)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/text@v0.3.2"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14040",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "Package: golang.org/x/text\nInstalled Version: v0.3.2\nVulnerability CVE-2020-14040\nSeverity: MEDIUM\nFixed Version: 0.3.3\nLink: [CVE-2020-14040](https://avd.aquasec.com/nvd/cve-2020-14040)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/local/bin/discover",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/local/bin/discover: golang.org/x/text@v0.3.2"
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      },
      "properties": {
        "imageName": "hashicorp/consul-dataplane:1.1.0",
        "repoDigests": [
          "hashicorp/consul-dataplane@sha256:1d5df8d6df005ee7f466b4a2baefcfee14d579cfc8ba0acb8dab0a2a2db80b83"
        ],
        "repoTags": [
          "hashicorp/consul-dataplane:1.1.0"
        ]
      }
    }
  ]
}